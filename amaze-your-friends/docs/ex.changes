





            _E_x _d_i_f_f_e_r_e_n_c_e_s - _v_e_r_s_i_o_n _1._1 _t_o _2._0


9
     This sheet summarizes the differences between  the  old
version  1.1  of  _e_x and the new version 2.0.  The new _e_x is
available as the standard _e_x on the VAX on the 5th floor  of
Evans,  and as a new and experimental version in /usr/new on
the Cory 11/70.  It will soon be available  in  /usr/new  on
the Computer Center and Ingres Machines.  Send problems over
the Berkeley network to ``vax:bill''.

_C_h_a_n_g_e_s _t_o _e_x_i_s_t_i_n_g _f_e_a_t_u_r_e_s

_O_p_t_i_o_n_s.

     The options _e_d_i_t_a_n_y, _e_d_i_t_e_d, _f_o_r_k, _h_u_s_h,  _p_r_i_n_t_a_l_l  and
_s_t_i_c_k_y have been deleted because of lack of use.  The _n_o_t_i_f_y
option has been renamed _r_e_p_o_r_t.

     The _h_o_m_e option will soon be superseded by the environ-
ment  feature of version 7 UNIX and has been deleted.  Simi-
larly the _m_o_d_e option is superseded by the _u_m_a_s_k of  version
7 and has also been deleted.

     The _v_i_s_u_a_l_m_e_s_s_a_g_e option has been deleted;  use  ``mesg
n'' at the system command level to inhibit interconsole mes-
sages.

     The _i_u_l option is replaced by a more general  mechanism
which  allows portions of the buffer to be processed through
specified commands; you can get _i_u_l processing on lines 1 to
100  of  a  file  by doing ``1,100!iul''.  This replaces the
lines 1 to 100 by the output of an _i_u_l command,  giving  the
command these lines as input.

_I_n_v_o_c_a_t_i_o_n

     The options -_o, -_n and -_p have been deleted.

_F_i_l_e_n_a_m_e _f_o_r_m_a_t_i_o_n

     The alternate filename is now represented as `#' rather
than  ``',  since  ``' is a shell metacharacter.  The editor
now uses a shell to expand filenames containing shell  meta-
characters.   If you use _c_s_h, then you can use all the shell
metasyntax in forming new filenames, including  home  direc-
tory  references with `~' and variables you define in ._c_s_h_r_c
using `$'.

_C_h_a_r_a_c_t_e_r _r_e_p_r_e_s_e_n_t_a_t_i_o_n

     Control characters are now represented as `^_x'; thus  a
control  X  is  printed  as  `^X';  the  delete character is


9                       July 21, 1991





                           - 2 -


represented `^?'.

_C_o_m_m_a_n_d _c_h_a_n_g_e_s

     There have been major changes to open/visual  (incompa-
tible ones are described below).

     It is no longer possible to discard changes by  repeat-
ing  the  _q_u_i_t command twice.  You must use the variant form
quit! to get out of the editor  discarding  changes.   Simi-
larly  the variant forms e! and next! must be used to edit a
new file or the next file without saving  changes  you  have
made.+

     A new form of the `!' shell escape replaces the  _e_x_p_a_n_d
and  _t_a_b_u_l_a_t_e  commands.  Thus the command ``1,10expand'' of
the old version is replaced by ``1,10!expand'' in  the  new.
Note  also that the command abbreviation _t_a no longer refers
to the _t_a_b_u_l_a_t_e command, which has been deleted, but  rather
refers to the new _t_a_g command.

     The format of the _a_r_g_s command has  been  changed;  the
files  are  no  longer  numbered, rather the entire argument
list is always printed with the current file  name  enclosed
by `[' and `]'.

     The format of the _f_i_l_e command output has been changed;
the editor says `[Not edited]' in the rare case that this is
true rather than saying `[Edited]'.  The command also  gives
the  percentage  of the way into the buffer that the current
line is.

     The format of the _s_e_t command has been improved;  ``set
all''  now  prints  in  a three column format.  The commands
``set %'', ``set !'' and ``set `'' have been  deleted.   The
command  ``set'' now prints in a one line format rather than
down the screen.

     The commands _e_c_h_o, _e_x_p_a_n_d, _h_e_l_p, _r_e_s_e_t, _s_y_n_c,  _t_a_b_u_l_a_t_e
and _x_p_a_n_d have been deleted.


_C_h_a_n_g_e_s _t_o _o_p_e_n _a_n_d _v_i_s_u_a_l

     A large number of changes have been made  to  open  and
visual;  we  summarize  only  the most noticeable ones here.
See the attached reference card for  more  information,  and
(even if you know how to use visual already) you should look
at _A_n _I_n_t_r_o_d_u_c_t_i_o_n _t_o _T_e_x_t _E_d_i_t_i_n_g _w_i_t_h _V_i.  We do not  dis-
cuss any of the new commands in visual here.|-
_________________________
+ Less useful are rewind! and recover!.
|-  It  is  now  possible  to edit with the focus of the
editing being _v_i_s_u_a_l using a command _v_i rather than  _e_x



                       July 21, 1991





                           - 3 -


     The delete line command is now dd rather than \\ (\\ no
longer  works!.)  In  fact,  d  and  other operators can now
operate on lines; thus dL deletes to the last  line  on  the
screen.   The shift commands < and > are now operators, thus
<< and >> now have the effect that < and > used to have.

     The command v has been  deleted;  only  its  synonym  z
remains.   The  K  operation  has  been moved to m; K has no
meaning in the new  version.   The  ^S  operation  has  been
deleted,  but  ^G does a sync, and also prints some informa-
tion.  The ^W operation has been deleted (use B).  The #,  @
and  ^X  operations  have  been  deleted.   To delete to the
beginning of the line use d0; the commands and x and  X  are
similar to #.

     During inputs, ^W backs up like b rather than B.

     Terminal support has been vastly improved;  the  editor
will now drive most any display terminal, using all terminal
features such as cursor addressing, clear to  end  of  line,
insert  and delete line and insert and delete character.  To
help performance on slow terminals some options are now  set
based on the intelligence and speed of the terminal; in par-
ticular, the default window size is 1/2 a full screen at 300
baud, or 2/3 of a full screen at 1200 baud.

























_________________________
on  the  command  line,  and using a new : command from
within visual to run command mode commands.




                       July 21, 1991








              Ex changes - Version 2.0 to 3.1

     This update describes  the  new  features  and  changes
which  have  been made in converting from version 2.0 to 3.1
of _e_x.  Each change is marked with the first  version  where
it  appeared.   Versions 2.1 through 2.7 were implemented by
Bill Joy; Mark Horton produced versions 2.8, 2.9 and 3.1 and
is maintaining the current version.

               _U_p_d_a_t_e _t_o _E_x _R_e_f_e_r_e_n_c_e _M_a_n_u_a_l

_C_o_m_m_a_n_d _l_i_n_e _o_p_t_i_o_n_s

2.1  Invoking _e_x via

             % ex -l

     now sets the _l_i_s_p and _s_h_o_w_m_a_t_c_h options.  This is suit-
     able for invocations from within _l_i_s_p(1).  If you don't
     like _s_h_o_w_m_a_t_c_h you can still use ``ex -l'' to get  _l_i_s_p
     set,  just  put the command ``set noshowmatch'' in your
     ._e_x_r_c file.

3.1  Invoking _e_x with an argument -w_n sets the value of  the
     _w_i_n_d_o_w  option  before  starting;  this is particularly
     suitable when invoking _v_i, thus

             % vi -w5 ex2.0-3.1

     edits the file with a 5 line initial window.

2.9  The text after a + on the command  line  is  no  longer
     limited  to  being a line number, but can be any single
     command.  This generality is also available within  the
     editor  on  _e_d_i_t  and  _n_e_x_t commands (but no blanks are
     allowed in such commands.) A very useful form  of  this
     option is exemplified by

             % vi +/main more.c


_C_o_m_m_a_n_d _a_d_d_r_e_s_s_i_n_g

2.9  The address form % is short for ``1,$''.

_C_o_m_m_a_n_d_s

2.2  The editor now ignores a ``:'' in front of commands, so
     you can say ``:wq'' even in command mode.

2.8  The _g_l_o_b_a_l command now does something sensible when you
     say

             g/pat/



                       July 21, 1991





                           - 2 -


     printing all lines containing _p_a_t; before this  printed
     the  first  line  after  each line containing _p_a_t.  The
     trailing / may be omitted here.

3.1  New commands _m_a_p and _u_n_m_a_p have been  added  which  are
     used  with  macros in _v_i_s_u_a_l mode.  These are described
     below.

3.1  The _n_e_x_t command now admits an  argument  of  the  form
     ``+command'' as described above.

3.1  The _s_u_b_s_t_i_t_u_t_e command, given no arguments, now repeats
     the  previous  _s_u_b_s_t_i_t_u_t_e, just as ``&'' does.  This is
     easier to type.

2.8  The substititute command ``s/str'', omitting the delim-
     iter  on  the  regular expression, now deletes ``str'';
     previously this was an error.

2.9  During pattern searches of a _t_a_g  command,  the  editor
     uses  _n_o_m_a_g_i_c  mode;  previously  a funny, undocumented
     mode of searching was used.

3.1  The editor requires that the tag names in the _t_a_g_s file
     be sorted.

2.3  The command _P is a synonym for _p_r_i_n_t.

2.9  The default starting address for _z is  .+1.   If  _z  is
     followed by a number, then this number is remembered by
     setting the _s_c_r_o_l_l option.

2.9  A  command  consisting  of  only  two  addresses,  e.g.
     ``1,10'' now causes all the lines to be printed, rather
     than just the last line.

_O_p_t_i_o_n_s

2.8  _A_u_t_o_w_r_i_t_e (which can be abbreviated _a_w)  is  an  on/off
     option,  off  by default.  If you set this option, then
     the editor will perform _w_r_i_t_e commands if  the  current
     file is modified and you give a _n_e_x_t, ^^ (in _v_i_s_u_a_l), !
     or _t_a_g commands, (and noticeably not before  _e_d_i_t  com-
     mands.)  Note that there is an equivalent way to do the
     command with autowrite set without the  write  in  each
     case: _e_d_i_t, :_e #, _s_h_e_l_l and _t_a_g!  do not _a_u_t_o_w_r_i_t_e.

3.1  A  new  option  _e_d_c_o_m_p_a_t_i_b_l_e  causes  the  presence  or
     absence  of  _g and _c suffixes on _s_u_b_s_t_i_t_u_t_e commands to
     be remembered, and to be toggled by repeating the  suf-
     fices.   The  suffix  _r makes the substitution be as in
     the ~ command instead of like &.

2.8  There is a new _h_a_r_d_t_a_b_s option, which  is  numeric  and



                       July 21, 1991





                           - 3 -


     defaults to 8.  Changing this to, say, 4, tells _e_x that
     either you system expands tabs to every  4  spaces,  or
     your terminal has hardware tabs set every 4 spaces.

3.1  There  is  a  new  boolean  option  _m_a_p_i_n_p_u_t  which  is
     described with the macro facility for _v_i_s_u_a_l below.

2.9  Whether _e_x prompts for commands now depends only on the
     setting  of  the  _p_r_o_m_p_t  variable  so that you can say
     ``set prompt'' inside _s_c_r_i_p_t(1) and get _e_x to prompt.

_E_n_v_i_r_o_n_m_e_n_t _e_n_q_u_i_r_i_e_s

3.1  _E_x will now execute initial commands  from  the  EXINIT
     environment  variable rather than ._e_x_r_c if it find such
     a variable.

2.9  _E_x will read the terminal description from the  TERMCAP
     environment  variable  if  the description there is the
     one for the TERM in the environment.  TERMCAP may still
     be  a  pathname  (starting  with a /; in that case this
     will  be  used  as  the  termcap   file   rather   than
     /etc/termcap,  and  the  terminal  description  will be
     sought there.)

































                       July 21, 1991





                           - 4 -


                     _V_i _T_u_t_o_r_i_a_l _U_p_d_a_t_e

_C_h_a_n_g_e _i_n _d_e_f_a_u_l_t _o_p_t_i_o_n _s_e_t_t_i_n_g_s.

3.1  The default setting for the _m_a_g_i_c option is now  _m_a_g_i_c.
     Thus the characters

             . [ * ~

     are special in scanning patterns in _v_i.  You should

             set nomagic

     in your ._e_x_r_c if you don't use these  regularly.   This
     makes  _v_i  default like _e_x.  In a related change, _b_e_a_u_-
     _t_i_f_y is no longer the default for _v_i.

_L_i_n_e _w_r_a_p _a_r_o_u_n_d

2.4  The _w _W _b _B _e and  _E  operations  in  visual  now  wrap
     around  line  boundaries.   Thus a sequence of enough w
     commands will get to any word after the  current  posi-
     tion  in the file, and b's will back up to any previous
     position.  Thus these are more like the sentence opera-
     tions ( and ).  (You still can't back around line boun-
     daries during inserts however.)

2.3  The / and ?  searches now find  the  next  or  previous
     instance  of the searched for string.  Previously, they
     would not find strings on the current line.   Thus  you
     can  move  to  the  right on the current line by typing
     ``/pref<ESC>'' where ``pref'' is a prefix of  the  word
     you  wish  to move to, and delete to a following string
     ``str'' by doing ``d/str<ESC>'', whether it is  on  the
     same  or  a  succeeding  line.  (Previously the command
     ``d/pat/'' deleted lines through the next line contain-
     ing ``pat''.  This can be accomplished now by the some-
     what unusual command ``d/pat/0'', which  is  short  for
     ``d/pat/+0''.   The  point  is  that  whole  lines  are
     affected if the search patter only  specifies  a  line,
     and  using  address  arithmetic  makes the pattern only
     specify a line.)

3.1  Arrow keys on terminals that send more than 1 character
     now  work.   Home up keys are supported as are the four
     directions.  (Note that the HP 2621 will turn on  func-
     tion  key  labels, and even then you have to hold shift
     down to use the arrow keys.  To avoid  turning  on  the
     labels,  and to give up the function keys, use terminal
     type 2621nl instead of 2621.)

_M_a_c_r_o_s

3.1  A parameterless macro facility is included from visual.



                       July 21, 1991





                           - 5 -


     This facility lets you say that when you type a partic-
     ular key, you really mean some longer sequence of keys.
     It  is  useful  when  you find yourself typing the same
     sequence of commands repeatedly.

     Briefly, there are two flavors of macros:

     a)   Put the macro body in a buffer  register,  say  x.
          Then  type  @x  to invoke it. @ may be followed by
          another @ to repeat the last macro.   This  allows
          macros up to 512 chars.

     b)   Use the map command from command  mode  (typically
          in the ._e_x_r_c file) as follows:

             map _l_h_s _r_h_s

     where _l_h_s will be mapped to _r_h_s.   There  are  restric-
     tions:  _l_h_s  should  be 1-keystroke (either 1 char or 1
     function key) since it must be entered within 1 second.
     The  _l_h_s  can  be  no  longer than 10 chars, the _r_h_s no
     longer than 100.  To get space, tab, ``|'', or  newline
     into  _l_h_s  or  _r_h_s, escape them with ctrl V. (It may be
     necessary to escape the ctrl V with ctrl V if  the  map
     command  is  given  from  visual mode.) Spaces and tabs
     inside the _r_h_s need not be escaped.

     For example, to make the Q key write and exit the  edi-
     tor, you can do

             :map Q :wq^VCR

     which means that whenever you type `Q', it will  be  as
     though  you  had  typed the four characters :wqCR.  The
     control V is needed because without it the return would
     end the colon command.

     For 1 shot macros it is best to  put  the  macro  in  a
     buffer  register and map a key to `@r', since this will
     allow the macro to be edited.

     Macros can be deleted with

             unmap lhs


     If the lhs of a macro is ``#0''  through  ``#9'',  this
     maps  the particular function key instead of the 2 char
     # sequence, if the terminal  has  function  keys.   For
     terminals  without function keys, the sequence #_x means
     function key _x, for any digit _x.  As a special case, on
     terminals  without  function keys, the #x sequence need
     not be typed within one second. The character # can  be
     changed by using a macro in the usual way:



                       July 21, 1991





                           - 6 -



             map ^V^I #

     to use tab, for example. (This  won't  affect  the  map
     command,  which  still  uses #, but just the invocation
     from visual mode.) The undo command will undo an entire
     macro call as a unit.

3.1  New commands in visual: ^Y and  ^E.  These  scroll  the
     screen  up  and  down 1 line, respectively. They can be
     given counts,  controlling  the  number  of  lines  the
     screen  is scrolled. They differ from ^U and ^D in that
     the cursor stays over the same line in  the  buffer  it
     was  over  before rather than staying in the same place
     on the screen. (^Y on  a  dumb  terminal  with  a  full
     screen  will  redraw  the screen moving the cursor up a
     few lines.) If you're looking for mnemonic value in the
     names,  try  this:  Y is right next to U and E is right
     next to D.

_M_i_s_c_e_l_l_a_n_e_o_u_s

3.1  In visual: `&' is a synonym for `:&<cr>'.

2.2  In input mode in open and visual ^V (like tenex) is now
     equivalent  to  ^Q (which is reminiscent of ITS) super-
     quoting the next character.

2.8  The j, k, and l keys now move the cursor down, up,  and
     right, respectively, in visual mode, as they used to do
     (and always did on some terminals).  This is  to  avoid
     the creeping of these keys into the map descriptions of
     terminals and to compensate for the lack of arrow  keys
     on some terminals.

2.5  The $ command now sets the  column  for  future  cursor
     motions  to effective infinity.  Thus a `$' followed by
     up/down cursor motions moves at  the  right  margin  of
     each line.

2.9  The way window sizes and scrolling commands  are  based
     on  the  options window and scroll has been rearranged.
     All command mode scrolling commands (z and ctrl D)  are
     based  on  scroll:  ^D  moves  scroll  lines,  z  moves
     scroll*2 lines.  Everything in visual (^D, ^U, ^F,  ^B,
     z,  window  sizes  in  general) are based on the window
     option. The defaults are arranged  so  that  everything
     seems  as before, but on hardcopy terminals at 300 baud
     the default for scroll is 11 instead of 6.








                       July 21, 1991








              _E_x _c_h_a_n_g_e_s - _V_e_r_s_i_o_n _3._1 _t_o _3._5

     This update describes  the  new  features  and  changes
which  have  been made in converting from version 3.1 to 3.5
of _e_x.  Each change is marked with the first  version  where
it appeared.

               _U_p_d_a_t_e _t_o _E_x _R_e_f_e_r_e_n_c_e _M_a_n_u_a_l

_C_o_m_m_a_n_d _l_i_n_e _o_p_t_i_o_n_s

3.4  A new command called _v_i_e_w has been  created.   _V_i_e_w  is
     just like _v_i but it sets _r_e_a_d_o_n_l_y.

3.4  The encryption code from the v7 editor is now  part  of
     _e_x.   You  can invoke _e_x with the -x option and it will
     ask for a key, as _e_d.   The  _e_d  _x  command  (to  enter
     encryption  mode  from within the editor) is not avail-
     able.   This  feature  may  not  be  available  in  all
     instances of _e_x due to memory limitations.

_C_o_m_m_a_n_d_s

3.4  Provisions to handle the new process stopping  features
     of the Berkeley TTY driver have been added.  A new com-
     mand, _s_t_o_p, takes you out of  the  editor  cleanly  and
     efficiently,  returning you to the shell.  Resuming the
     editor puts you back in  command  or  visual  mode,  as
     appropriate.   If  _a_u_t_o_w_r_i_t_e  is set and there are out-
     standing changes, a write is done first unless you  say
     ``stop!''.

3.4  A

             :vi <file>

     command from visual mode is now treated the same as a

             :edit <file>    or      :ex <file>

     command.  The meaning of the _v_i command from _e_x command
     mode is not affected.

3.3  A new command mode command _x_i_t (abbreviated _x) has been
     added.   This  is the same as _w_q but will not bother to
     write if there have been no changes to the file.

_O_p_t_i_o_n_s

3.4  A read only mode  now  lets  you  guarantee  you  won't
     clobber  your file by accident.  You can set the on/off
     option _r_e_a_d_o_n_l_y (_r_o), and writes will fail  unless  you
     use  an ! after the write.  Commands such as _x, _Z_Z, the
     autowrite option, and in general anything  that  writes



                       July 21, 1991





                           - 2 -


     is affected.  This option is turned on if you invoke ex
     with the -R flag.

3.4  The _w_r_a_p_m_a_r_g_i_n option is now usable.  The way it  works
     has  been  completely revamped.  Now if you go past the
     margin (even in the middle of a word) the  entire  word
     is erased and rewritten on the next line.  This changes
     the semantics of the number  given  to  wrapmargin.   0
     still  means off.  Any other number is still a distance
     from the right edge of the screen, but this location is
     now  the  right  edge  of the area where wraps can take
     place,  instead  of  the  left  edge.   Wrapmargin  now
     behaves much like fill/nojustify mode in _n_r_o_f_f.

3.3  The options _w_3_0_0, _w_1_2_0_0, and _w_9_6_0_0 can  be  set.   They
     are  synonyms  for _w_i_n_d_o_w, but only apply at 300, 1200,
     or 9600 baud, respectively.  Thus you can  specify  you
     want  a 12 line window at 300 baud and a 23 line window
     at 1200 baud in your EXINIT with

             :set w300=12 w1200=23


3.3  The new option _t_i_m_e_o_u_t (default on)  causes  macros  to
     time  out  after one second.  Turn it off and they will
     wait forever.  This is useful if you want multi charac-
     ter macros, but if your terminal sends escape sequences
     for arrow keys, it will  be  necessary  to  hit  escape
     twice to get a beep.

3.3  The new option _r_e_m_a_p (default on) causes the editor  to
     attempt  to  map  the  result  of a macro mapping again
     until the mapping fails.  This makes it possible,  say,
     to  map  q  to  #  and  #1 to something else and get q1
     mapped to something else.  Turning it off makes it pos-
     sible to map ^L to l and map ^R to ^L without having ^R
     map to l.

3.3  The new (string)  valued  option  _t_a_g_s  allows  you  to
     specify  a  list  of tag files, similar to the ``path''
     variable of csh.  The files  are  separated  by  spaces
     (which  are  entered  preceded  by a backslash) and are
     searched left to right.  The default  value  is  ``tags
     /usr/lib/tags'',  which  has the same effect as before.
     It is recommended that ``tags''  always  be  the  first
     entry.   On Ernie CoVax, /usr/lib/tags contains entries
     for the system defined library procedures from  section
     3 of the manual.

_E_n_v_i_r_o_n_m_e_n_t _e_n_q_u_i_r_i_e_s

3.4  The editor now adopts the convention that a null string
     in  the environment is the same as not being set.  This
     applies to TERM, TERMCAP, and EXINIT.



                       July 21, 1991





                           - 3 -


                     _V_i _T_u_t_o_r_i_a_l _U_p_d_a_t_e

_D_e_l_e_t_e_d _f_e_a_t_u_r_e_s

3.3  The ``q'' command from visual no longer works  at  all.
     You  must  use  ``Q''  to  get to ex command mode.  The
     ``q'' command was deleted because  of  user  complaints
     about hitting it by accident too often.

3.5  The provisions for changing  the  window  size  with  a
     numeric prefix argument to certain visual commands have
     been deleted.  The correct way  to  change  the  window
     size  is  to  use  the z command, for example z5<cr> to
     change the window to 5 lines.

3.3  The option "mapinput" is dead.  It has been replaced by
     a much more powerful mechanism: ``:map!''.

_C_h_a_n_g_e _i_n _d_e_f_a_u_l_t _o_p_t_i_o_n _s_e_t_t_i_n_g_s

3.3  The default window sizes have  been  changed.   At  300
     baud  the  window is now 8 lines (it was 1/2 the screen
     size).  At 1200 baud the window is now 16 lines (it was
     2/3  the  screen  size, which was usually also 16 for a
     typical 24 line CRT).  At 9600 baud the window is still
     the  full  screen  size.   Any baud rate less than 1200
     behaves like 300, any over 1200 like 9600.  This change
     makes _v_i more usable on a large screen at slow speeds.

_V_i _c_o_m_m_a_n_d_s

3.3  The command ``ZZ'' from vi is the same  as  ``:x<cr>''.
     This  is  the  recommended  way to leave the editor.  Z
     must be typed twice to avoid hitting it accidently.

3.4  The command ^Z is the same as ``:stop<cr>''.  Note that
     if  you  have an arrow key that sends ^Z the stop func-
     tion will take priority over the  arrow  function.   If
     you  have  your  ``susp''  character  set  to something
     besides ^Z, that key will be honored as well.

3.3  It is now possible from visual to string several search
     expressions  together  separated by semicolons the same
     as command mode.  For example, you can say

             /foo/;/bar

     from visual and it will move to the first ``bar'' after
     the next ``foo''.  This also works within one line.

3.3  ^R is now the same as ^L on terminals where  the  right
     arrow key sends ^L (This includes the Televideo 912/920
     and the ADM 31 terminals.)




                       July 21, 1991





                           - 4 -


3.4  The visual page motion commands ^F and ^B now treat any
     preceding counts as number of pages to move, instead of
     changes to the window size.  That is, 2^F moves forward
     2 pages.

_M_a_c_r_o_s

3.3  The ``mapinput'' mechanism  of  version  3.1  has  been
     replaced  by  a  more powerful mechanism.  An ``!'' can
     follow the word ``map'' in the  _m_a_p  command.   Map!'ed
     macros  only apply during input mode, while map'ed mac-
     ros only apply during command mode.  Using  ``map''  or
     ``map!''  by itself produces a listing of macros in the
     corresponding mode.

3.4  A word abbreviation mode is  now  available.   You  can
     define abbreviations with the _a_b_b_r_e_v_i_a_t_e command

             :abbr foo find outer otter

     which maps ``foo'' to ``find outer otter''.   Abbrevia-
     tions  can be turned off with the _u_n_a_b_b_r_e_v_i_a_t_e command.
     The syntax of these commands is identical  to  the  _m_a_p
     and  _u_n_m_a_p  commands,  except  that  the ! forms do not
     exist.  Abbreviations are  considered  when  in  visual
     input  mode only, and only affect whole words typed in,
     using the conservative  definition.   (Thus  ``foobar''
     will not be mapped as it would using ``map!'') Abbrevi-
     ate and unabbreviate can be abbreviated to  ``ab''  and
     ``una'', respectively.



























                       July 21, 1991


