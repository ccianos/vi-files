








                    Ex Reference Manual
             Version 3.5/2.13 - September, 1980


                        William Joy

              _R_e_v_i_s_e_d _f_o_r _v_e_r_s_i_o_n_s _3._5/_2._1_3 _b_y
                        Mark Horton

                 Computer Science Division
 Department of Electrical Engineering and Computer Science
             University of California, Berkeley
                    Berkeley, Ca.  94720



                          _A_B_S_T_R_A_C_T

          _E_x a line oriented text  editor,  which  sup-
     ports  both  command and display oriented editing.
     This  reference  manual  describes   the   command
     oriented  part of _e_x; the display editing features
     of _e_x are described in _A_n _I_n_t_r_o_d_u_c_t_i_o_n _t_o  _D_i_s_p_l_a_y
     _E_d_i_t_i_n_g _w_i_t_h _V_i.  Other documents about the editor
     include the introduction  _E_d_i_t:  _A  _t_u_t_o_r_i_a_l,  the
     _E_x/_e_d_i_t  _C_o_m_m_a_n_d _S_u_m_m_a_r_y, and a _V_i _Q_u_i_c_k _R_e_f_e_r_e_n_c_e
     card.



July 21, 1991



































                    Ex Reference Manual
             Version 3.5/2.13 - September, 1980


                        William Joy

              _R_e_v_i_s_e_d _f_o_r _v_e_r_s_i_o_n_s _3._5/_2._1_3 _b_y
                        Mark Horton

                 Computer Science Division
 Department of Electrical Engineering and Computer Science
             University of California, Berkeley
                    Berkeley, Ca.  94720



_1.  _S_t_a_r_t_i_n_g _e_x

     Each instance of the editor has a set of options, which
can  be  set  to tailor it to your liking.  The command _e_d_i_t
invokes a version of _e_x designed for more casual  or  begin-
ning users by changing the default settings of some of these
options.  To  simplify  the  description  which  follows  we
assume the default settings of the options.

     When invoked, _e_x determines the terminal type from  the
TERM  variable  in  the  environment.  It there is a TERMCAP
variable in the environment, and the type  of  the  terminal
described   there  matches  the  TERM  variable,  then  that
description is used.  Also if the TERMCAP variable  contains
a  pathname  (beginning  with a /) then the editor will seek
the description of the terminal in that  file  (rather  than
the  default /etc/termcap.) If there is a variable EXINIT in
the environment, then the editor will execute  the  commands
in that variable, otherwise if there is a file ._e_x_r_c in your
HOME directory _e_x reads commands from that file,  simulating
a  _s_o_u_r_c_e command.  Option setting commands placed in EXINIT
or ._e_x_r_c will be executed before each editor session.

     A command to enter _e_x has the following prototype:|-

        ex [ - ] [ -v ] [ -t _t_a_g ] [ -r ] [ -l ] [ -w_n ] [ -x ] [ -R ] [ +_c_o_m_m_a_n_d ] name ...

The most common case edits a single file  with  no  options,
i.e.:
_________________________
The financial support of an IBM Graduate Fellowship and
the  National  Science  Foundation  under grants MCS74-
07644-A03 and MCS78-07291 is gratefully acknowledged.
|- Brackets `[' `]' surround optional parameters here.




                       July 21, 1991





                           - 2 -



        ex name

The  -   command   line   option   option   suppresses   all
interactive-user feedback and is useful in processing editor
scripts in command files.  The -_v option  is  equivalent  to
using  _v_i rather than _e_x.  The -_t option is equivalent to an
initial _t_a_g command, editing the file containing the _t_a_g and
positioning  the editor at its definition.  The -_r option is
used in recovering after an editor or system crash, retriev-
ing  the last saved version of the named file or, if no file
is specified, typing a list of saved files.  The  -_l  option
sets  up  for  editing  LISP, setting the _s_h_o_w_m_a_t_c_h and _l_i_s_p
options.  The -_w option sets the default window size  to  _n,
and  is useful on dialups to start in small windows.  The -_x
option causes _e_x to prompt for  a  _k_e_y,  which  is  used  to
encrypt  and  decrypt the contents of the file, which should
already be encrypted using the same key, see _c_r_y_p_t(1).   The
-_R option sets the _r_e_a_d_o_n_l_y option at  the  start.   |=  _N_a_m_e
arguments  indicate  files to be edited.  An argument of the
form +_c_o_m_m_a_n_d indicates that the editor should begin by exe-
cuting  the  specified command.  If _c_o_m_m_a_n_d is omitted, then
it defaults to ``$'', positioning the  editor  at  the  last
line  of  the  first  file initially.  Other useful commands
here are scanning patterns of  the  form  ``/pat''  or  line
numbers, e.g. ``+100'' starting at line 100.

_2.  _F_i_l_e _m_a_n_i_p_u_l_a_t_i_o_n

_2._1.  _C_u_r_r_e_n_t _f_i_l_e

     _E_x is normally editing the contents of a  single  file,
whose  name  is  recorded in the _c_u_r_r_e_n_t file name.  _E_x per-
forms all editing actions in a buffer (actually a  temporary
file)  into  which  the  text of the file is initially read.
Changes made to the buffer have no effect on the file  being
edited  unless and until the buffer contents are written out
to the file with a _w_r_i_t_e command.  After the buffer contents
are  written,  the previous contents of the written file are
no longer accessible.  When  a  file  is  edited,  its  name
becomes  the  current  file  name, and its contents are read
into the buffer.

     The current file is  almost  always  considered  to  be
_e_d_i_t_e_d.  This means that the contents of the buffer are log-
ically connected with the current file name, so that writing
the  current  buffer  contents  onto  that  file, even if it
exists, is a reasonable action.  If the current file is  not
_e_d_i_t_e_d  then  _e_x will not normally write on it if it already
exists.*
_________________________
|= Not available in all v2 editors due  to  memory  con-
straints.
* The _f_i_l_e command will say  ``[Not  edited]''  if  the



                       July 21, 1991





                           - 3 -


_2._2.  _A_l_t_e_r_n_a_t_e _f_i_l_e

     Each time a new value is  given  to  the  current  file
name,  the previous current file name is saved as the _a_l_t_e_r_-
_n_a_t_e file name.  Similarly if a file is mentioned  but  does
not  become  the  current file, it is saved as the alternate
file name.

_2._3.  _F_i_l_e_n_a_m_e _e_x_p_a_n_s_i_o_n

     Filenames within the editor may be specified using  the
normal  shell expansion conventions.  In addition, the char-
acter `%' in filenames is replaced by the _c_u_r_r_e_n_t file  name
and the character `#' by the _a_l_t_e_r_n_a_t_e file name.|-

_2._4.  _M_u_l_t_i_p_l_e _f_i_l_e_s _a_n_d _n_a_m_e_d _b_u_f_f_e_r_s

     If more than one file is given  on  the  command  line,
then  the  first  file  is  edited  as described above.  The
remaining arguments are placed with the first  file  in  the
_a_r_g_u_m_e_n_t  _l_i_s_t.   The current argument list may be displayed
with the _a_r_g_s command.  The next file in the  argument  list
may  be edited with the _n_e_x_t command.  The argument list may
also be respecified by specifying a list  of  names  to  the
_n_e_x_t  command.  These names are expanded, the resulting list
of names becomes the new argument list,  and  _e_x  edits  the
first file on the list.

     For saving blocks of text while editing, and especially
when  editing  more  than  one file, _e_x has a group of named
buffers.  These are similar to  the  normal  buffer,  except
that  only  a  limited number of operations are available on
them.  The buffers have names _a through _z.|=

_2._5.  _R_e_a_d _o_n_l_y

     It is possible to use _e_x in _r_e_a_d _o_n_l_y mode to  look  at
files  that  you  have no intention of modifying.  This mode
protects you from accidently  overwriting  the  file.   Read
only  mode is on when the _r_e_a_d_o_n_l_y option is set.  It can be
turned on with the -_R command line option, by the _v_i_e_w  com-
mand line invocation, or by setting the _r_e_a_d_o_n_l_y option.  It
can be cleared by setting _n_o_r_e_a_d_o_n_l_y.   It  is  possible  to
_________________________
current file is not considered edited.
|- This makes it easy to deal alternately with two files
and eliminates the need for retyping the name  supplied
on  an  _e_d_i_t command after a _N_o _w_r_i_t_e _s_i_n_c_e _l_a_s_t _c_h_a_n_g_e
diagnostic is received.
|= It is also possible to refer  to  _A  through  _Z;  the
upper  case  buffers are the same as the lower but com-
mands append to named buffers rather than replacing  if
upper case names are used.




                       July 21, 1991





                           - 4 -


write, even while in read only mode, by indicating that  you
really  know  what  you  are doing.  You can write to a dif-
ferent file, or can use the ! form of write, even  while  in
read only mode.

_3.  _E_x_c_e_p_t_i_o_n_a_l _C_o_n_d_i_t_i_o_n_s

_3._1.  _E_r_r_o_r_s _a_n_d _i_n_t_e_r_r_u_p_t_s

     When errors occur _e_x (optionally)  rings  the  terminal
bell  and,  in any case, prints an error diagnostic.  If the
primary input is from a file, editor  processing  will  ter-
minate.   If  an  interrupt  signal  is  received, _e_x prints
``Interrupt'' and returns to its command level.  If the pri-
mary input is a file, then _e_x will exit when this occurs.

_3._2.  _R_e_c_o_v_e_r_i_n_g _f_r_o_m _h_a_n_g_u_p_s _a_n_d _c_r_a_s_h_e_s

     If a hangup signal is received and the buffer has  been
modified  since  it  was  last written out, or if the system
crashes, either the editor (in the first case) or the system
(after  it  reboots  in the second) will attempt to preserve
the buffer.  The next time you log in you should be able  to
recover  the work you were doing, losing at most a few lines
of changes from the last point before the hangup  or  editor
crash.  To recover a file you can use the -_r option.  If you
were editing the file _r_e_s_u_m_e, then you should change to  the
directory where you were when the crash occurred, giving the
command

        ex -r _r_e_s_u_m_e

After checking that the retrieved file is indeed ok, you can
_w_r_i_t_e it over the previous contents of that file.

     You will normally get mail from the system telling  you
when a file has been saved after a crash.  The command

        ex -r

will print a list of the files which  have  been  saved  for
you.   (In the case of a hangup, the file will not appear in
the list, although it can be recovered.)

_4.  _E_d_i_t_i_n_g _m_o_d_e_s

     _E_x has five distinct modes.  The primary mode  is  _c_o_m_-
_m_a_n_d  mode.  Commands are entered in command mode when a `:'
prompt is present, and are executed  each  time  a  complete
line is sent.  In _t_e_x_t _i_n_p_u_t mode _e_x gathers input lines and
places them in the file.  The  _a_p_p_e_n_d,  _i_n_s_e_r_t,  and  _c_h_a_n_g_e
commands use text input mode.  No prompt is printed when you
are in text input mode.  This mode is left by typing  a  `.'
alone at the beginning of a line, and _c_o_m_m_a_n_d mode resumes.



                       July 21, 1991





                           - 5 -


     The last three modes are _o_p_e_n and _v_i_s_u_a_l modes, entered
by  the  commands  of  the  same  name, and, within open and
visual modes _t_e_x_t _i_n_s_e_r_t_i_o_n mode.   _O_p_e_n  and  _v_i_s_u_a_l  modes
allow  local  editing operations to be performed on the text
in the file.  The _o_p_e_n command displays one line at  a  time
on  any  terminal  while  _v_i_s_u_a_l works on CRT terminals with
random positioning cursors, using the screen as  a  (single)
window  for file editing changes.  These modes are described
(only) in _A_n _I_n_t_r_o_d_u_c_t_i_o_n _t_o _D_i_s_p_l_a_y _E_d_i_t_i_n_g _w_i_t_h _V_i.

_5.  _C_o_m_m_a_n_d _s_t_r_u_c_t_u_r_e

     Most command names are English words, and initial  pre-
fixes  of the words are acceptable abbreviations.  The ambi-
guity of abbreviations is resolved in favor of the more com-
monly used commands.*

_5._1.  _C_o_m_m_a_n_d _p_a_r_a_m_e_t_e_r_s

     Most commands accept prefix  addresses  specifying  the
lines  in  the file upon which they are to have effect.  The
forms of these addresses will be discussed below.  A  number
of  commands  also  may take a trailing _c_o_u_n_t specifying the
number of lines to be involved in  the  command.|-  Thus  the
command  ``10p''  will  print  the  tenth line in the buffer
while ``delete 5'' will delete five lines from  the  buffer,
starting with the current line.

     Some commands take  other  information  or  parameters,
this information always being given after the command name.|=

_5._2.  _C_o_m_m_a_n_d _v_a_r_i_a_n_t_s

     A number of commands have two distinct  variants.   The
variant  form  of  the  command is invoked by placing an `!'
immediately after the command name.   Some  of  the  default
variants may be controlled by options; in this case, the `!'
serves to toggle the default.

_5._3.  _F_l_a_g_s _a_f_t_e_r _c_o_m_m_a_n_d_s

     The characters `#', `p' and `l'  may  be  placed  after
many commands.** In this case, the  command  abbreviated  by
_________________________
* As an example, the command _s_u_b_s_t_i_t_u_t_e can be abbrevi-
ated  `s' while the shortest available abbreviation for
the _s_e_t command is `se'.
|- Counts are rounded down if necessary.
|=  Examples would be option names in a _s_e_t command i.e.
``set number'', a file name in an _e_d_i_t command, a regu-
lar expression in a _s_u_b_s_t_i_t_u_t_e command, or a target ad-
dress for a _c_o_p_y command, i.e. ``1,5 copy 25''.
**  A `p' or `l' must be preceded by a blank or tab ex-
cept in the single special case `dp'.



                       July 21, 1991





                           - 6 -


these characters is executed after  the  command  completes.
Since  _e_x  normally  prints  the new current line after each
change, `p' is rarely necessary.  Any number of `+'  or  `-'
characters  may  also  be  given  with these flags.  If they
appear, the specified offset is applied to the current  line
value before the printing command is executed.

_5._4.  _C_o_m_m_e_n_t_s

     It is  possible  to  give  editor  commands  which  are
ignored.   This is useful when making complex editor scripts
for which comments are desired.  The  comment  character  is
the  double  quote: ".  Any command line beginning with " is
ignored.  Comments beginning with " may also  be  placed  at
the  ends  of  commands, except in cases where they could be
confused as part of text (shell escapes and  the  substitute
and map commands).

_5._5.  _M_u_l_t_i_p_l_e _c_o_m_m_a_n_d_s _p_e_r _l_i_n_e

     More than one command  may  be  placed  on  a  line  by
separating  each  pair of commands by a `|' character.  How-
ever the _g_l_o_b_a_l commands, comments, and the shell escape `!'
must  be  the  last  command on a line, as they are not ter-
minated by a `|'.

_5._6.  _R_e_p_o_r_t_i_n_g _l_a_r_g_e _c_h_a_n_g_e_s

     Most commands which change the contents of  the  editor
buffer  give  feedback  if the scope of the change exceeds a
threshold given by the _r_e_p_o_r_t option.  This  feedback  helps
to  detect  undesirably  large  changes  so that they may be
quickly and easily reversed with an  _u_n_d_o.   After  commands
with  more  global effect such as _g_l_o_b_a_l or _v_i_s_u_a_l, you will
be informed if the net change in the number of lines in  the
buffer during this command exceeds this threshold.

_6.  _C_o_m_m_a_n_d _a_d_d_r_e_s_s_i_n_g

_6._1.  _A_d_d_r_e_s_s_i_n_g _p_r_i_m_i_t_i_v_e_s

.                   The current line.  Most  commands  leave
                    the  current line as the last line which
                    they affect.  The  default  address  for
                    most  commands is the current line, thus
                    `.' is rarely used alone as an address.

_n                   The _nth line  in  the  editor's  buffer,
                    lines  being  numbered sequentially from
                    1.

$                   The last line in the buffer.

%                   An abbreviation for ``1,$'', the  entire



                       July 21, 1991





                           - 7 -


                    buffer.

+_n -_n               An offset relative to the current buffer
                    line.|-

/_p_a_t/ ?_p_a_t?         Scan forward and  backward  respectively
                    for  a  line  containing  _p_a_t, a regular
                    expression  (as  defined  below).    The
                    scans  normally  wrap  around the end of
                    the buffer.  If all that is  desired  is
                    to  print  the next line containing _p_a_t,
                    then the trailing / or ? may be omitted.
                    If  _p_a_t  is omitted or explicitly empty,
                    then the last regular expression  speci-
                    fied is located.|=

'' '_x               Before each non-relative motion  of  the
                    current  line  `.', the previous current
                    line is marked with a tag,  subsequently
                    referred to as `'''.  This makes it easy
                    to refer or return to this previous con-
                    text.   Marks may also be established by
                    the _m_a_r_k  command,  using  single  lower
                    case  letters  _x  and  the  marked lines
                    referred to as `'_x'.

_6._2.  _C_o_m_b_i_n_i_n_g _a_d_d_r_e_s_s_i_n_g _p_r_i_m_i_t_i_v_e_s

     Addresses to commands consist of a series of addressing
primitives, separated by `,' or `;'.  Such address lists are
evaluated left-to-right.  When addresses  are  separated  by
`;' the current line `.' is set to the value of the previous
addressing expression before  the  next  address  is  inter-
preted.   If  more  addresses  are  given  than  the command
requires, then all but the last one or two are ignored.   If
the  command  takes  two addresses, the first addressed line
must precede the second in the buffer.|-

_7.  _C_o_m_m_a_n_d _d_e_s_c_r_i_p_t_i_o_n_s

     The following form is a prototype for all _e_x commands:

_________________________
|- The forms `.+3' `+3' and `+++' are all equivalent; if
the current line is line 100 they all address line 103.
|=  The  forms \/ and \? scan using the last regular ex-
pression used in a scan; after a substitute //  and  ??
would scan using the substitute's regular expression.
|- Null address specifications are permitted in  a  list
of  addresses,  the default in this case is the current
line `.'; thus `,100' is equivalent to `.,100'.  It  is
an  error  to  give a prefix address to a command which
expects none.




                       July 21, 1991





                           - 8 -



        _a_d_d_r_e_s_s command ! _p_a_r_a_m_e_t_e_r_s _c_o_u_n_t _f_l_a_g_s

All parts are optional; the degenerate  case  is  the  empty
command  which prints the next line in the file.  For sanity
with use from within _v_i_s_u_a_l mode, _e_x ignores a ``:'' preced-
ing any command.

     In the  following  command  descriptions,  the  default
addresses  are shown in parentheses, which are _n_o_t, however,
part of the command.
9
abbreviate _w_o_r_d _r_h_s                     abbr: ab

     Add the named abbreviation to the current  list.   When
     in input mode in visual, if _w_o_r_d is typed as a complete
     word, it will be changed to _r_h_s.
9
( . ) append                            abbr: a
_t_e_x_t
.

     Reads the input text and places it after the  specified
     line.   After  the command, `.' addresses the last line
     input or the specified line if no lines were input.  If
     address  `0'  is given, text is placed at the beginning
     of the buffer.
9
a!
_t_e_x_t
.

     The variant flag to _a_p_p_e_n_d toggles the setting for  the
     _a_u_t_o_i_n_d_e_n_t option during the input of _t_e_x_t.
9
args

     The members of the argument list are printed, with  the
     current argument delimited by `[' and `]'.
9
( . , . ) change _c_o_u_n_t                  abbr: c
_t_e_x_t
.

     Replaces the specified lines with the input _t_e_x_t.   The
     current  line  becomes the last line input; if no lines
     were input it is left as for a _d_e_l_e_t_e.
9
c!
_t_e_x_t
.



                       July 21, 1991





                           - 9 -


     The variant toggles _a_u_t_o_i_n_d_e_n_t during the _c_h_a_n_g_e.
9
( . , . )copy _a_d_d_r _f_l_a_g_s                abbr: co

     A _c_o_p_y of the specified lines  is  placed  after  _a_d_d_r,
     which  may  be `0'.  The current line `.' addresses the
     last line of the copy.  The command _t is a synonym  for
     _c_o_p_y.
9
( . , . )delete _b_u_f_f_e_r _c_o_u_n_t _f_l_a_g_s      abbr: d

     Removes the specified lines from the buffer.  The  line
     after  the  last line deleted becomes the current line;
     if the lines deleted were originally at  the  end,  the
     new  last  line  becomes  the current line.  If a named
     _b_u_f_f_e_r is specified by giving a letter, then the speci-
     fied  lines are saved in that buffer, or appended to it
     if an upper case letter is used.
9
edit _f_i_l_e                               abbr: e
ex _f_i_l_e

     Used to begin an editing session on a  new  file.   The
     editor first checks to see if the buffer has been modi-
     fied since the last _w_r_i_t_e command was  issued.   If  it
     has  been,  a  warning  is  issued  and  the command is
     aborted.  The command otherwise deletes the entire con-
     tents  of  the  editor buffer, makes the named file the
     current file and prints the new filename.  After insur-
     ing that this file is sensible|- the  editor  reads  the
     file into its buffer.

     If the read of the file completes  without  error,  the
     number of lines and characters read is typed.  If there
     were any non-ASCII characters  in  the  file  they  are
     stripped  of  their  non-ASCII  high bits, and any null
     characters in the file are discarded.  If none of these
     errors occurred, the file is considered _e_d_i_t_e_d.  If the
     last line of the input file  is  missing  the  trailing
     newline  character, it will be supplied and a complaint
     will be issued.  This command leaves the  current  line
     `.' at the last line read.|=
9

_________________________
|- I.e., that it is not a binary file such as a directo-
ry,  a  block  or  character  special  file  other than
/_d_e_v/_t_t_y, a terminal, or a binary  or  executable  file
(as indicated by the first word).
|=  If  executed from within _o_p_e_n or _v_i_s_u_a_l, the current
line is initially the first line of the file.




                       July 21, 1991





                           - 10 -


e! _f_i_l_e

     The variant form suppresses the complaint about modifi-
     cations  having been made and not written from the edi-
     tor buffer, thus discarding all changes which have been
     made before editing the new file.
9
e +_n _f_i_l_e

     Causes the editor to begin at line _n rather than at the
     last  line;  _n may also be an editor command containing
     no spaces, e.g.: ``+/pat''.
9
file                                    abbr: f

     Prints the current  file  name,  whether  it  has  been
     `[Modified]'  since  the last _w_r_i_t_e command, whether it
     is _r_e_a_d _o_n_l_y, the current line, the number of lines  in
     the  buffer,  and the percentage of the way through the
     buffer of the current line.*
9
file _f_i_l_e

     The current file name is changed to _f_i_l_e which is  con-
     sidered `[Not edited]'.
9
( 1 , $ ) global /_p_a_t/ _c_m_d_s             abbr: g

     First marks  each  line  among  those  specified  which
     matches  the  given regular expression.  Then the given
     command list is executed with `.' initially set to each
     marked line.

     The command list consists of the remaining commands  on
     the  current  input  line  and may continue to multiple
     lines by ending all but the last such line with a  `\'.
     If  _c_m_d_s  (and  possibly  the  trailing / delimiter) is
     omitted, each line matching _p_a_t  is  printed.   _A_p_p_e_n_d,
     _i_n_s_e_r_t,  and  _c_h_a_n_g_e  commands and associated input are
     permitted; the `.' terminating input may be omitted  if
     it would be on the last line of the command list.  _O_p_e_n
     and _v_i_s_u_a_l commands are permitted in the  command  list
     and take input from the terminal.

     The _g_l_o_b_a_l command itself may not appear in _c_m_d_s.   The
_________________________
* In the rare case that the current file is `[Not edit-
ed]'  this  is noted also; in this case you have to use
the form w! to write to the file, since the  editor  is
not sure that a write will not destroy a file unrelated
to the current contents of the buffer.




                       July 21, 1991





                           - 11 -


     _u_n_d_o command is  also  not  permitted  there,  as  _u_n_d_o
     instead  can  be used to reverse the entire _g_l_o_b_a_l com-
     mand.  The options _a_u_t_o_p_r_i_n_t and _a_u_t_o_i_n_d_e_n_t  are  inhi-
     bited  during  a  _g_l_o_b_a_l,  (and possibly the trailing /
     delimiter) and the value of the _r_e_p_o_r_t option  is  tem-
     porarily  infinite,  in  deference  to a _r_e_p_o_r_t for the
     entire global.  Finally, the context mark `'''  is  set
     to  the  value  of `.' before the global command begins
     and is not changed  during  a  global  command,  except
     perhaps by an _o_p_e_n or _v_i_s_u_a_l within the _g_l_o_b_a_l.
9
g! /_p_a_t/ _c_m_d_s                           abbr: v

     The variant form of _g_l_o_b_a_l runs _c_m_d_s at each  line  not
     matching _p_a_t.
9
( . )insert                             abbr: i
_t_e_x_t
.

     Places the given text before the specified  line.   The
     current  line  is left at the last line input; if there
     were none input it is  left  at  the  line  before  the
     addressed  line.  This command differs from _a_p_p_e_n_d only
     in the placement of text.
9
i!
_t_e_x_t
.

     The variant toggles _a_u_t_o_i_n_d_e_n_t during the _i_n_s_e_r_t.
9
( . , .+1 ) join _c_o_u_n_t _f_l_a_g_s            abbr: j

     Places  the  text  from  a  specified  range  of  lines
     together  on one line.  White space is adjusted at each
     junction to provide at least one blank  character,  two
     if  there  was a `.' at the end of the line, or none if
     the first following character is a `)'.   If  there  is
     already  white  space  at the end of the line, then the
     white space at the start of the next line will be  dis-
     carded.
9
j!

     The variant causes a simpler _j_o_i_n with no  white  space
     processing; the characters in the lines are simply con-
     catenated.
9





                       July 21, 1991





                           - 12 -


( . ) k _x

     The _k command is a  synonym  for  _m_a_r_k.   It  does  not
     require a blank or tab before the following letter.
9
( . , . ) list _c_o_u_n_t _f_l_a_g_s

     Prints the specified lines in a more  unambiguous  way:
     tabs  are  printed  as `^I' and the end of each line is
     marked with a trailing `$'.  The current line  is  left
     at the last line printed.
9
map _l_h_s _r_h_s

     The _m_a_p command is used to define  macros  for  use  in
     _v_i_s_u_a_l  mode.  _L_h_s should be a single character, or the
     sequence ``#n'', for n a digit, referring  to  function
     key _n.  When this character or function key is typed in
     _v_i_s_u_a_l mode, it will be as though the corresponding _r_h_s
     had  been  typed.   On terminals without function keys,
     you can type ``#n''.  See section 6.9 of  the  ``Intro-
     duction to Display Editing with Vi'' for more details.
9
( . ) mark _x

     Gives the specified line mark _x, a  single  lower  case
     letter.   The  _x  must be preceded by a blank or a tab.
     The addressing form `'x' then addresses this line.  The
     current line is not affected by this command.
9
( . , . ) move _a_d_d_r                     abbr: m

     The _m_o_v_e command repositions the specified lines to  be
     after  _a_d_d_r.   The first of the moved lines becomes the
     current line.
9
next                                    abbr: n

     The next file from the command line  argument  list  is
     edited.
9
n!

     The variant suppresses warnings about the modifications
     to  the  buffer not having been written out, discarding
     (irretrievably) any changes which may have been made.
9
n _f_i_l_e_l_i_s_t
n +_c_o_m_m_a_n_d _f_i_l_e_l_i_s_t

9


                       July 21, 1991





                           - 13 -


     The specified _f_i_l_e_l_i_s_t is expanded  and  the  resulting
     list replaces the current argument list; the first file
     in the new list is then edited.  If  _c_o_m_m_a_n_d  is  given
     (it  must contain no spaces), then it is executed after
     editing the first such file.
9
( . , . ) number _c_o_u_n_t _f_l_a_g_s            abbr: # or nu

     Prints each specified line preceded by its buffer  line
     number.   The  current  line  is  left at the last line
     printed.
9
( . ) open _f_l_a_g_s                        abbr: o
( . ) open /_p_a_t/ _f_l_a_g_s

     Enters intraline editing _o_p_e_n mode  at  each  addressed
     line.   If _p_a_t is given, then the cursor will be placed
     initially at the beginning of the string matched by the
     pattern.  To exit this mode use Q.  See _A_n _I_n_t_r_o_d_u_c_t_i_o_n
     _t_o _D_i_s_p_l_a_y _E_d_i_t_i_n_g _w_i_t_h _V_i for more details.
     |=
9
preserve

     The current editor buffer is saved as though the system
     had  just  crashed.   This  command  is for use only in
     emergencies when a _w_r_i_t_e command  has  resulted  in  an
     error  and you don't know how to save your work.  After
     a _p_r_e_s_e_r_v_e you should seek help.
9
( . , . )print _c_o_u_n_t                    abbr: p or P

     Prints the specified lines with non-printing characters
     printed  as control characters `^_x'; delete (octal 177)
     is represented as `^?'.  The current line  is  left  at
     the last line printed.
9
( . )put _b_u_f_f_e_r                         abbr: pu

     Puts back previously _d_e_l_e_t_e_d or _y_a_n_k_e_d lines.  Normally
     used  with  _d_e_l_e_t_e to effect movement of lines, or with
     _y_a_n_k to effect duplication of lines.  If no  _b_u_f_f_e_r  is
     specified,  then  the  last  _d_e_l_e_t_e_d  or _y_a_n_k_e_d text is
     restored.*  By  using  a  named  buffer,  text  may  be
     restored that was saved there at any previous time.
_________________________
|= Not available in all v2 editors due  to  memory  con-
straints.
* But no modifying commands may intervene  between  the
_d_e_l_e_t_e  or  _y_a_n_k  and  the  _p_u_t, nor may lines be moved
between files without using a named buffer.
9


                       July 21, 1991





                           - 14 -


quit                                    abbr: q

     Causes _e_x to terminate.  No automatic write of the edi-
     tor  buffer to a file is performed.  However, _e_x issues
     a warning message if the file  has  changed  since  the
     last _w_r_i_t_e command was issued, and does not _q_u_i_t.|- Nor-
     mally,  you  will  wish  to  save your changes, and you
     should give a _w_r_i_t_e command; if  you  wish  to  discard
     them, use the q! command variant.
9
q!

     Quits from the editor, discarding changes to the buffer
     without complaint.
9
( . ) read _f_i_l_e                         abbr: r

     Places a copy of the text of  the  given  file  in  the
     editing buffer after the specified line.  If no _f_i_l_e is
     given the current file name is used.  The current  file
     name  is not changed unless there is none in which case
     _f_i_l_e becomes the current name.   The  sensibility  res-
     trictions for the _e_d_i_t command apply here also.  If the
     file buffer is empty and there is no current name  then
     _e_x treats this as an _e_d_i_t command.

     Address `0' is legal for this command  and  causes  the
     file  to  be  read  at  the  beginning  of  the buffer.
     Statistics are given as for the _e_d_i_t command  when  the
     _r_e_a_d successfully terminates.  After a _r_e_a_d the current
     line is the last line read.|=
9
( . ) read  !_c_o_m_m_a_n_d

     Reads the output of the command _c_o_m_m_a_n_d into the buffer
     after  the  specified line.  This is not a variant form
     of the command, rather  a  read  specifying  a  _c_o_m_m_a_n_d
     rather  than a _f_i_l_e_n_a_m_e; a blank or tab before the ! is
     mandatory.
9
recover _f_i_l_e

     Recovers _f_i_l_e from the system save area.  Used after  a
     accidental hangup of the phone** or a system crash** or
_________________________
|- _E_x will also issue a diagnostic  if  there  are  more
files in the argument list.
|= Within _o_p_e_n and _v_i_s_u_a_l the current line is set to the
first line read rather than the last.
** The system saves a copy of the file you were editing
only if you have made changes to the file.




                       July 21, 1991





                           - 15 -


     _p_r_e_s_e_r_v_e command.  Except when  you  use  _p_r_e_s_e_r_v_e  you
     will be notified by mail when a file is saved.
9
rewind                                  abbr: rew

     The argument list is rewound, and the first file in the
     list is edited.
9
rew!

     Rewinds the argument list discarding any  changes  made
     to the current buffer.
9
set _p_a_r_a_m_e_t_e_r

     With no arguments, prints those  options  whose  values
     have  been  changed from their defaults; with parameter
     _a_l_l it prints all of the option values.

     Giving an option name followed  by  a  `?'  causes  the
     current value of that option to be printed.  The `?' is
     unnecessary  unless  the  option  is  Boolean   valued.
     Boolean  options  are  given  values either by the form
     `set _o_p_t_i_o_n' to turn them on or `set no_o_p_t_i_o_n' to  turn
     them  off;  string and numeric options are assigned via
     the form `set _o_p_t_i_o_n=value'.

     More than one parameter may be given to _s_e_t;  they  are
     interpreted left-to-right.
9
shell                                   abbr: sh

     A new shell is created.  When  it  terminates,  editing
     resumes.
9
source _f_i_l_e                             abbr: so

     Reads and executes commands from  the  specified  file.
     _S_o_u_r_c_e commands may be nested.
9
( . , . ) substitute /_p_a_t/_r_e_p_l/ _o_p_t_i_o_n_s _c_o_u_n_t _f_l_a_g_sabbr: s

     On each specified line, the first instance  of  pattern
     _p_a_t  is  replaced  by replacement pattern _r_e_p_l.  If the
     _g_l_o_b_a_l indicator option character `g' appears, then all
     instances  are  substituted;  if the _c_o_n_f_i_r_m indication
     character `c' appears, then  before  each  substitution
     the  line to be substituted is typed with the string to
     be substituted marked with `|^' characters.   By  typing
     an  `y' one can cause the substitution to be performed,
     any other input causes no change to take place.   After



                       July 21, 1991





                           - 16 -


     a  _s_u_b_s_t_i_t_u_t_e the current line is the last line substi-
     tuted.

     Lines may be split by substituting new-line  characters
     into  them.   The  newline  in  _r_e_p_l must be escaped by
     preceding it with a `\'.  Other  metacharacters  avail-
     able in _p_a_t and _r_e_p_l are described below.
9
_s_t_o_p

     Suspends the editor, returning control to the top level
     shell.   If  _a_u_t_o_w_r_i_t_e  is  set  and  there are unsaved
     changes, a write is done first unless  the  form  _s_t_o_p!
     is  used.   This  commands is only available where sup-
     ported by the teletype driver and operating system.
9
( . , . ) substitute _o_p_t_i_o_n_s _c_o_u_n_t _f_l_a_g_sabbr: s

     If _p_a_t and _r_e_p_l are omitted, then the last substitution
     is repeated.  This is a synonym for the & command.
9
( . , . ) t _a_d_d_r _f_l_a_g_s

     The _t command is a synonym for _c_o_p_y.
9
ta _t_a_g

     The focus of editing switches to the location  of  _t_a_g,
     switching to a different line in the current file where
     it is defined, or if necessary to another file.|=

     The tags file is normally created by a program such  as
     _c_t_a_g_s,  and  consists  of  a number of lines with three
     fields separated by blanks or tabs.   The  first  field
     gives  the  name of the tag, the second the name of the
     file where the tag resides,  and  the  third  gives  an
     addressing form which can be used by the editor to find
     the tag; this field is usually a contextual scan  using
     `/_p_a_t/'  to  be  immune  to  minor changes in the file.
     Such scans are always performed as if _n_o_m_a_g_i_c was set.

     The tag names in the tags file must be sorted alphabet-
ically.  |=
9
9_________________________
|= If you have modified the current file before giving a
_t_a_g  command, you must write it out; giving another _t_a_g
command, specifying no _t_a_g will reuse the previous tag.
|=  Not  available  in all v2 editors due to memory con-
straints.




                       July 21, 1991





                           - 17 -


unabbreviate _w_o_r_d                       abbr: una

     Delete _w_o_r_d from the list of abbreviations.
9
undo                                    abbr: u

     Reverses the changes made in the  buffer  by  the  last
     buffer  editing command.  Note that _g_l_o_b_a_l commands are
     considered a single command for the purpose of _u_n_d_o (as
     are _o_p_e_n and _v_i_s_u_a_l.) Also, the commands _w_r_i_t_e and _e_d_i_t
     which interact with the file system cannot  be  undone.
     _U_n_d_o is its own inverse.

     _U_n_d_o always marks the previous  value  of  the  current
     line  `.'  as  `'''.  After an _u_n_d_o the current line is
     the first line restored or the line  before  the  first
     line  deleted  if no lines were restored.  For commands
     with more global effect such as _g_l_o_b_a_l and  _v_i_s_u_a_l  the
     current  line  regains  it's pre-command value after an
     _u_n_d_o.
9
unmap _l_h_s

     The macro  expansion  associated  by  _m_a_p  for  _l_h_s  is
     removed.
9
( 1 , $ ) v /_p_a_t/ _c_m_d_s

     A synonym for the _g_l_o_b_a_l command  variant  g!,  running
     the  specified  _c_m_d_s  on each line which does not match
     _p_a_t.
9
version                                 abbr: ve

     Prints the current version number of the editor as well
     as the date the editor was last changed.
9
( . ) visual _t_y_p_e _c_o_u_n_t _f_l_a_g_s           abbr: vi

     Enters visual mode at  the  specified  line.   _T_y_p_e  is
     optional  and  may be `-' , `|^' or `.' as in the _z com-
     mand to specify the placement of the specified line  on
     the screen.  By default, if _t_y_p_e is omitted, the speci-
     fied line is placed as the  first  on  the  screen.   A
     _c_o_u_n_t  specifies an initial window size; the default is
     the value of the option _w_i_n_d_o_w.  See  the  document  _A_n
     _I_n_t_r_o_d_u_c_t_i_o_n  _t_o  _D_i_s_p_l_a_y  _E_d_i_t_i_n_g  _w_i_t_h  _V_i  for  more
     details.  To exit this mode, type Q.
9





                       July 21, 1991





                           - 18 -


visual file
visual +_n file

     From visual mode, this command is the same as edit.
9
( 1 , $ ) write _f_i_l_e                    abbr: w

     Writes changes made back to _f_i_l_e, printing  the  number
     of  lines  and  characters  written.   Normally _f_i_l_e is
     omitted and the text goes back where it came from.   If
     a  _f_i_l_e is specified, then text will be written to that
     file.* If the file does not exist it is  created.   The
     current  file  name  is  changed  only  if  there is no
     current file name; the current line is never changed.

     If an error occurs while writing the current and _e_d_i_t_e_d
     file,  the  editor  considers  that there has been ``No
     write since last change'' even if the  buffer  had  not
     previously been modified.
9
( 1 , $ ) write>> _f_i_l_e                  abbr: w>>

     Writes the buffer contents at the end  of  an  existing
     file.

9
w! _n_a_m_e

     Overrides the checking of the normal _w_r_i_t_e command, and
     will write to any file which the system permits.
9
( 1 , $ ) w  !_c_o_m_m_a_n_d

     Writes the specified  lines  into  _c_o_m_m_a_n_d.   Note  the
     difference  between  w! which overrides checks and w  !
     which writes to a command.
9
wq _n_a_m_e

     Like a _w_r_i_t_e and then a _q_u_i_t command.
9
wq! _n_a_m_e

     The variant overrides checking on  the  sensibility  of
_________________________
* The editor writes to a file only if it is the current
file  and  is _e_d_i_t_e_d, if the file does not exist, or if
the file is actually a teletype,  /_d_e_v/_t_t_y,  /_d_e_v/_n_u_l_l.
Otherwise,  you  must give the variant form w! to force
the write.




                       July 21, 1991





                           - 19 -


     the _w_r_i_t_e command, as w! does.
9
xit _n_a_m_e

     If any changes have been made and not  written,  writes
     the buffer out.  Then, in any case, quits.
9
( . , . )yank _b_u_f_f_e_r _c_o_u_n_t              abbr: ya

     Places the specified lines in  the  named  _b_u_f_f_e_r,  for
     later  retrieval  via _p_u_t.  If no buffer name is speci-
     fied, the lines go to a more volatile  place;  see  the
     _p_u_t command description.
9
( .+1 ) z _c_o_u_n_t

     Print the next _c_o_u_n_t lines, default _w_i_n_d_o_w.
9
( . ) z _t_y_p_e _c_o_u_n_t

     Prints a window of text with the specified line at  the
     top.   If _t_y_p_e is `-' the line is placed at the bottom;
     a `.' causes the line to be placed in  the  center.*  A
     count  gives the number of lines to be displayed rather
     than double the number specified by the _s_c_r_o_l_l  option.
     On  a  CRT  the screen is cleared before display begins
     unless a count which is less than the  screen  size  is
     given.   The  current  line  is  left  at the last line
     printed.
9
! _c_o_m_m_a_n_d

     The remainder of the line after the  `!'  character  is
     sent  to  a  shell  to be executed.  Within the text of
     _c_o_m_m_a_n_d the characters `%' and `#' are expanded  as  in
     filenames  and  the  character `!' is replaced with the
     text of the previous  command.   Thus,  in  particular,
     `!!'  repeats  the last such shell escape.  If any such
     expansion is  performed,  the  expanded  line  will  be
     echoed.  The current line is unchanged by this command.

     If there has been ``[No write]'' of the buffer contents
     since  the  last  change  to the editing buffer, then a
_________________________
* Forms `z=' and  `z|^'  also  exist;  `z='  places  the
current  line in the center, surrounds it with lines of
`-' characters and leaves  the  current  line  at  this
line.   The  form  `z|^'  prints  the window before `z-'
would.  The characters `+', `|^' and `-' may be repeated
for cumulative effect.  On some v2 editors, no _t_y_p_e may
be given.
9


                       July 21, 1991





                           - 20 -


     diagnostic will be printed before the command  is  exe-
     cuted  as  a warning.  A single `!' is printed when the
     command completes.
9
( _a_d_d_r , _a_d_d_r ) ! _c_o_m_m_a_n_d

     Takes the specified address range and  supplies  it  as
     standard  input  to  _c_o_m_m_a_n_d; the resulting output then
     replaces the input lines.
9
( $ ) =

     Prints the line number  of  the  addressed  line.   The
     current line is unchanged.
9
( . , . ) > _c_o_u_n_t _f_l_a_g_s
( . , . ) < _c_o_u_n_t _f_l_a_g_s

     Perform intelligent shifting on the specified lines;  <
     shifts  left  and > shift right.  The quantity of shift
     is determined by the _s_h_i_f_t_w_i_d_t_h option and the  repeti-
     tion  of the specification character.  Only white space
     (blanks and tabs) is shifted; no  non-white  characters
     are  discarded  in  a left-shift.  The current line be-
     comes the last line which changed due to the shifting.
9
^D

     An end-of-file from a terminal  input  scrolls  through
     the  file.  The _s_c_r_o_l_l option specifies the size of the
     scroll, normally a half screen of text.
9
( .+1 , .+1 )
( .+1 , .+1 ) |

     An address alone  causes  the  addressed  lines  to  be
     printed.   A  blank  line  prints  the next line in the
     file.
9
( . , . ) & _o_p_t_i_o_n_s _c_o_u_n_t _f_l_a_g_s

     Repeats the previous _s_u_b_s_t_i_t_u_t_e command.
9
( . , . ) ~ _o_p_t_i_o_n_s _c_o_u_n_t _f_l_a_g_s

     Replaces the previous regular expression with the  pre-
     vious replacement pattern from a substitution.



9


                       July 21, 1991





                           - 21 -


_8.  _R_e_g_u_l_a_r _e_x_p_r_e_s_s_i_o_n_s _a_n_d _s_u_b_s_t_i_t_u_t_e _r_e_p_l_a_c_e_m_e_n_t _p_a_t_t_e_r_n_s

_8._1.  _R_e_g_u_l_a_r _e_x_p_r_e_s_s_i_o_n_s

     A regular expression specifies  a  set  of  strings  of
characters.   A  member of this set of strings is said to be
_m_a_t_c_h_e_d by the regular expression.  _E_x remembers two  previ-
ous  regular  expressions:  the  previous regular expression
used in  a  _s_u_b_s_t_i_t_u_t_e  command  and  the  previous  regular
expression used elsewhere (referred to as the previous _s_c_a_n_-
_n_i_n_g regular expression.) The  previous  regular  expression
can always be referred to by a null _r_e, e.g. `//' or `??'.

_8._2.  _M_a_g_i_c _a_n_d _n_o_m_a_g_i_c

     The regular expressions allowed by _e_x  are  constructed
in  one  of  two  ways depending on the setting of the _m_a_g_i_c
option.  The _e_x and _v_i default setting of _m_a_g_i_c gives  quick
access  to  a powerful set of regular expression metacharac-
ters.  The disadvantage of  _m_a_g_i_c  is  that  the  user  must
remember  that  these  metacharacters  are _m_a_g_i_c and precede
them with the character `\'  to  use  them  as  ``ordinary''
characters.   With  _n_o_m_a_g_i_c,  the  default for _e_d_i_t, regular
expressions are much simpler, there being only two metachar-
acters.   The  power  of  the  other metacharacters is still
available by preceding the (now) ordinary character  with  a
`\'.  Note that `\' is thus always a metacharacter.

     The remainder of the discussion of regular  expressions
assumes that that the setting of this option is _m_a_g_i_c.|-

_8._3.  _B_a_s_i_c _r_e_g_u_l_a_r _e_x_p_r_e_s_s_i_o_n _s_u_m_m_a_r_y

     The following basic constructs are  used  to  construct
_m_a_g_i_c mode regular expressions.

_c_h_a_r           An ordinary character  matches  itself.   The
               characters  `|^'  at  the beginning of a line,
               `$' at the end of line, `*' as any  character
               other  than the first, `.', `\', `[', and `~'
               are  not  ordinary  characters  and  must  be
               escaped  (preceded)  by  `\' to be treated as
               such.

|^              At the beginning  of  a  pattern  forces  the
_________________________
|- To discern what is true with _n_o_m_a_g_i_c it  suffices  to
remember  that the only special characters in this case
will be `|^' at the beginning of a  regular  expression,
`$'  at the end of a regular expression, and `\'.  With
_n_o_m_a_g_i_c the characters `~' and `&' also lose their spe-
cial  meanings  related to the replacement pattern of a
substitute.




                       July 21, 1991





                           - 22 -


               match to succeed only at the beginning  of  a
               line.

$              At the end of a regular expression forces the
               match to succeed only at the end of the line.

.              Matches any single character except the  new-
               line character.

\<             Forces the match to occur only at the  begin-
               ning  of a ``variable'' or ``word''; that is,
               either at the beginning of a  line,  or  just
               before  a  letter,  digit,  or  underline and
               after a character not one of these.

\>             Similar to `\<', but matching the  end  of  a
               ``variable'' or ``word'', i.e. either the end
               of the line or before character which is nei-
               ther a letter, nor a digit, nor the underline
               character.

[_s_t_r_i_n_g]       Matches any (single) character in  the  class
               defined by _s_t_r_i_n_g.  Most characters in _s_t_r_i_n_g
               define  themselves.   A  pair  of  characters
               separated by `-' in _s_t_r_i_n_g defines the set of
               characters collating  between  the  specified
               lower  and  upper  bounds,  thus `[a-z]' as a
               regular  expression  matches   any   (single)
               lower-case letter.  If the first character of
               _s_t_r_i_n_g is an `|^' then the  construct  matches
               those  characters  which  it  otherwise would
               not; thus `[|^a-z]'  matches  anything  but  a
               lower-case  letter (and of course a newline).
               To place any of the characters `|^',  `[',  or
               `-'  in  _s_t_r_i_n_g  you  must escape them with a
               preceding `\'.

_8._4.  _C_o_m_b_i_n_i_n_g _r_e_g_u_l_a_r _e_x_p_r_e_s_s_i_o_n _p_r_i_m_i_t_i_v_e_s

     The concatenation of two  regular  expressions  matches
the  leftmost  and  then longest string which can be divided
with the first piece matching the first  regular  expression
and  the second piece matching the second.  Any of the (sin-
gle character matching) regular expressions mentioned  above
may  be  followed  by  the  character  `*' to form a regular
expression which matches any number of adjacent  occurrences
(including  0)  of characters matched by the regular expres-
sion it follows.

     The character `~' may be used in a regular  expression,
and  matches  the text which defined the replacement part of
the last _s_u_b_s_t_i_t_u_t_e command.  A regular  expression  may  be
enclosed  between  the  sequences  `\('  and  `\)' with side
effects in the _s_u_b_s_t_i_t_u_t_e replacement patterns.



                       July 21, 1991





                           - 23 -


_8._5.  _S_u_b_s_t_i_t_u_t_e _r_e_p_l_a_c_e_m_e_n_t _p_a_t_t_e_r_n_s

     The basic metacharacters for  the  replacement  pattern
are  `&'  and  `~';  these  are  given as `\&' and `\~' when
_n_o_m_a_g_i_c is set.  Each instance of `&'  is  replaced  by  the
characters  which the regular expression matched.  The meta-
character `~' stands, in the replacement  pattern,  for  the
defining text of the previous replacement pattern.

     Other metasequences possible in the replacement pattern
are  always  introduced  by the escaping character `\'.  The
sequence `\_n' is replaced by the text matched  by  the  _n-th
regular subexpression enclosed between `\(' and  `\)'.|-  The
sequences  `\u'  and  `\l'  cause  the immediately following
character in the replacement to be converted  to  upper-  or
lower-case  respectively if this character is a letter.  The
sequences `\U' and `\L'  turn  such  conversion  on,  either
until  `\E'  or `\e' is encountered, or until the end of the
replacement pattern.

_9.  _O_p_t_i_o_n _d_e_s_c_r_i_p_t_i_o_n_s

9
autoindent, ai                default: noai

     Can be used to ease the preparation of structured  pro-
     gram  text.  At the beginning of each _a_p_p_e_n_d, _c_h_a_n_g_e or
     _i_n_s_e_r_t command or when a new line is _o_p_e_n_e_d or  created
     by  an  _a_p_p_e_n_d, _c_h_a_n_g_e, _i_n_s_e_r_t, or _s_u_b_s_t_i_t_u_t_e operation
     within _o_p_e_n or _v_i_s_u_a_l mode, _e_x looks at the line  being
     appended  after,  the  first  line  changed or the line
     inserted before and  calculates  the  amount  of  white
     space  at  the  start  of the line.  It then aligns the
     cursor at the level of indentation so determined.

     If the user then types lines of text in, they will con-
     tinue to be justified at the displayed indenting level.
     If more white space is typed  at  the  beginning  of  a
     line,  the  following  line will start aligned with the
     first non-white character of  the  previous  line.   To
     back  the  cursor  up to the preceding tab stop one can
     hit ^D.  The tab stops going backwards are  defined  at
     multiples  of  the _s_h_i_f_t_w_i_d_t_h option.  You _c_a_n_n_o_t back-
     space over the indent, except by sending an end-of-file
     with a ^D.

     Specially processed in this mode  is  a  line  with  no
     characters  added  to it, which turns into a completely
     blank line (the white space provided for the _a_u_t_o_i_n_d_e_n_t
_________________________
|-  When  nested,   parenthesized   subexpressions   are
present,  _n  is  determined  by counting occurrences of
`\(' starting from the left.
9


                       July 21, 1991





                           - 24 -


     is discarded.) Also specially processed  in  this  mode
     are  lines  beginning  with an `|^' and immediately fol-
     lowed by a ^D.  This causes the  input  to  be  reposi-
     tioned  at the beginning of the line, but retaining the
     previous indent for the next line.   Similarly,  a  `0'
     followed  by  a  ^D  repositions  at  the beginning but
     without retaining the previous indent.

     _A_u_t_o_i_n_d_e_n_t doesn't happen in _g_l_o_b_a_l  commands  or  when
     the input is not a terminal.
9
autoprint, ap                 default: ap

     Causes the  current  line  to  be  printed  after  each
     _d_e_l_e_t_e,  _c_o_p_y, _j_o_i_n, _m_o_v_e, _s_u_b_s_t_i_t_u_t_e, _t, _u_n_d_o or shift
     command.  This has  the  same  effect  as  supplying  a
     trailing  `p'  to  each  such  command.   _A_u_t_o_p_r_i_n_t  is
     suppressed in globals, and only applies to the last  of
     many commands on a line.
9
autowrite, aw                 default: noaw

     Causes the contents of the buffer to be written to  the
     current  file  if you have modified it and give a _n_e_x_t,
     _r_e_w_i_n_d, _s_t_o_p, _t_a_g, or  !   command,  or  a  ^|^  (switch
     files)  or ^] (tag goto) command in _v_i_s_u_a_l.  Note, that
     the _e_d_i_t and _e_x commands do  _n_o_t  autowrite.   In  each
     case,  there  is  an  equivalent  way of switching when
     autowrite is set to avoid the _a_u_t_o_w_r_i_t_e (_e_d_i_t for _n_e_x_t,
     _r_e_w_i_n_d!   for  .I  rewind  , _s_t_o_p!  for _s_t_o_p, _t_a_g!  for
     _t_a_g, _s_h_e_l_l for !, and :e #  and  a  :ta!  command  from
     within _v_i_s_u_a_l).
9
beautify, bf                  default: nobeautify

     Causes all control characters except tab,  newline  and
     form-feed  to be discarded from the input.  A complaint
     is registered the first time a backspace  character  is
     discarded.  _B_e_a_u_t_i_f_y does not apply to command input.
9
directory, dir                default: dir=/tmp

     Specifies the directory in which _e_x places  its  buffer
     file.  If this directory in not writable, then the edi-
     tor will exit abruptly when it  fails  to  be  able  to
     create its buffer there.
9
edcompatible                  default: noedcompatible

     Causes the presence of absence of _g and _c  suffixes  on
     substitute commands to be remembered, and to be toggled
     by repeating the suffices.   The  suffix  _r  makes  the


9                       July 21, 1991





                           - 25 -


     substitution be as in the ~ command, instead of like &.
     |=|=
9
errorbells, eb                default: noeb

     Error messages are preceded by a bell.* If possible the
     editor  always  places  the error message in a standout
     mode of the terminal (such as inverse video) instead of
     ringing the bell.
9
hardtabs, ht                  default: ht=8

     Gives the boundaries on which  terminal  hardware  tabs
     are set (or on which the system expands tabs).
9
ignorecase, ic                default: noic

     All upper case characters in the  text  are  mapped  to
     lower  case  in  regular expression matching.  In addi-
     tion, all upper case characters in regular  expressions
     are  mapped  to  lower  case  except in character class
     specifications.
9
lisp                          default: nolisp

     _A_u_t_o_i_n_d_e_n_t indents appropriately for _l_i_s_p code, and the
     ( ) { } [[ and ]] commands in _o_p_e_n and _v_i_s_u_a_l are modi-
     fied to have meaning for _l_i_s_p.
9
list                          default: nolist

     All printed lines will be  displayed  (more)  unambigu-
     ously,  showing  tabs  and  end-of-lines as in the _l_i_s_t
     command.
9
magic                         default: magic for _e_x and _v_i|-

     If _n_o_m_a_g_i_c is set, the  number  of  regular  expression
     metacharacters  is  greatly  reduced, with only `|^' and
     `$' having special effects.  In addition the  metachar-
     acters  `~'  and  `&'  of  the  replacement pattern are
     treated as normal characters.  All the normal metachar-
     acters may be made _m_a_g_i_c when _n_o_m_a_g_i_c is set by preced-
     ing them with a `\'.
99_________________________
|=|= Version 3 only.
* Bell ringing in _o_p_e_n and  _v_i_s_u_a_l  on  errors  is  not
suppressed by setting _n_o_e_b.
|- _N_o_m_a_g_i_c for _e_d_i_t.




                       July 21, 1991





                           - 26 -


mesg                          default: mesg

     Causes write permission to be turned off to the  termi-
     nal while you are in visual mode, if _n_o_m_e_s_g is set.  |=|=
9
number, nu                    default: nonumber

     Causes all output lines to be printed with  their  line
     numbers.   In addition each input line will be prompted
     for by supplying the line number it will have.
9
open                          default: open

     If _n_o_o_p_e_n, the commands _o_p_e_n and _v_i_s_u_a_l are not permit-
     ted.  This is set for _e_d_i_t to prevent confusion result-
     ing from accidental entry to open or visual mode.
9
optimize, opt                 default: optimize

     Throughput of text is expedited by setting the terminal
     to not do automatic carriage returns when printing more
     than one (logical) line  of  output,  greatly  speeding
     output  on  terminals  without addressable cursors when
     text with leading white space is printed.
9
paragraphs, para              default: para=IPLPPPQPP LIbp

     Specifies the paragraphs for the { and } operations  in
     _o_p_e_n  and  _v_i_s_u_a_l.   The  pairs  of  characters  in the
     option's value are the names of the macros which  start
     paragraphs.
9
prompt                        default: prompt

     Command mode input is prompted for with a `:'.
9
redraw                        default: noredraw

     The editor simulates (using great amounts  of  output),
     an intelligent terminal on a dumb terminal (e.g. during
     insertions in _v_i_s_u_a_l the characters to the right of the
     cursor  position  are refreshed as each input character
     is typed.) Useful only at very high speed.
9
remap                         default: remap

     If on, macros  are  repeatedly  tried  until  they  are
     unchanged.  |=|= For example, if _o is mapped to _O, and  _O
_________________________
|=|= Version 3 only.
|=|= Version 3 only.


9                       July 21, 1991





                           - 27 -


     is mapped to _I, then if _r_e_m_a_p is set, _o will map to  _I,
     but if _n_o_r_e_m_a_p is set, it will map to _O.
9
report                        default: report=5|-

     Specifies a threshold for feedback from commands.   Any
     command  which  modifies more than the specified number
     of lines will provide feedback as to the scope  of  its
     changes.   For commands such as _g_l_o_b_a_l, _o_p_e_n, _u_n_d_o, and
     _v_i_s_u_a_l which have potentially more far reaching  scope,
     the  net change in the number of lines in the buffer is
     presented at the end of the command,  subject  to  this
     same threshold.  Thus notification is suppressed during
     a _g_l_o_b_a_l command on the individual commands performed.
9
scroll                        default: scroll=1/2 window

     Determines the number of logical lines scrolled when an
     end-of-file  is  received from a terminal input in com-
     mand mode, and the number of lines printed by a command
     mode _z command (double the value of _s_c_r_o_l_l).
9
sections                      default: sections=SHNHH HU

     Specifies the section macros for the [[ and  ]]  opera-
     tions  in  _o_p_e_n and _v_i_s_u_a_l.  The pairs of characters in
     the options's value are the names of the  macros  which
     start paragraphs.
9
shell, sh                     default: sh=/bin/sh

     Gives the path name of the shell forked for  the  shell
     escape  command  `!',  and  by  the _s_h_e_l_l command.  The
     default is taken from  SHELL  in  the  environment,  if
     present.
9
shiftwidth, sw                default: sw=8

     Gives the width a software tab stop,  used  in  reverse
     tabbing  with  ^D when using _a_u_t_o_i_n_d_e_n_t to append text,
     and by the shift commands.
9
showmatch, sm                 default: nosm

     In _o_p_e_n and _v_i_s_u_a_l mode, when a ) or } is  typed,  move
     the  cursor  to  the  matching ( or { for one second if
     this matching character is on  the  screen.   Extremely
     useful with _l_i_s_p.
_________________________
|- 2 for _e_d_i_t.




                       July 21, 1991





                           - 28 -


slowopen, slow                terminal dependent

     Affects the display  algorithm  used  in  _v_i_s_u_a_l  mode,
     holding  off  display updating during input of new text
     to improve throughput when the terminal in use is  both
     slow and unintelligent.  See _A_n _I_n_t_r_o_d_u_c_t_i_o_n _t_o _D_i_s_p_l_a_y
     _E_d_i_t_i_n_g _w_i_t_h _V_i for more details.
9
tabstop, ts                   default: ts=8

     The editor expands tabs in the  input  file  to  be  on
     _t_a_b_s_t_o_p boundaries for the purposes of display.
9
taglength, tl                 default: tl=0

     Tags are not significant beyond this  many  characters.
     A value of zero (the default) means that all characters
     are significant.
9
tags                          default:             tags=tags
/usr/lib/tags

     A path of files to be used as tag  files  for  the  _t_a_g
     command.  |=|= A requested tag is  searched  for  in  the
     specified  files,  sequentially.   By  default (even in
     version 2) files called _t_a_g_s are searched  for  in  the
     current  directory  and  in /usr/lib (a master file for
     the entire system.)
9
term                          from environment TERM

     The terminal type of the output device.
9
terse                         default: noterse

     Shorter error diagnostics are produced for the  experi-
     enced user.
9
warn                          default: warn

     Warn if there has been `[No write since  last  change]'
     before a `!' command escape.
9
window                        default:  window=speed  depen-
dent

     The number of lines in a text window in the _v_i_s_u_a_l com-
     mand.   The  default  is  8 at slow speeds (600 baud or
_________________________
|=|= Version 3 only.
9


                       July 21, 1991





                           - 29 -


     less), 16 at medium speed (1200  baud),  and  the  full
     screen (minus one line) at higher speeds.
9
w300, w1200, w9600

     These are not true options but set _w_i_n_d_o_w only  if  the
     speed  is  slow  (300),  medium (1200), or high (9600),
     respectively.  They are suitable for an EXINIT and make
     it easy to change the 8/16/full screen rule.
9
wrapscan, ws                  default: ws

     Searches using the regular  expressions  in  addressing
     will wrap around past the end of the file.
9
wrapmargin, wm                default: wm=0

     Defines a margin for automatic wrapover of text  during
     input in _o_p_e_n and _v_i_s_u_a_l modes.  See _A_n _I_n_t_r_o_d_u_c_t_i_o_n _t_o
     _T_e_x_t _E_d_i_t_i_n_g _w_i_t_h _V_i for details.
9
writeany, wa                  default: nowa

     Inhibit the checks normally made before _w_r_i_t_e commands,
     allowing  a  write to any file which the system protec-
     tion mechanism will allow.

_1_0.  _L_i_m_i_t_a_t_i_o_n_s

     Editor limits that the user is likely to encounter  are
as  follows:  1024  characters  per line, 256 characters per
global command list, 128 characters per file name, 128 char-
acters  in the previous inserted and deleted text in _o_p_e_n or
_v_i_s_u_a_l, 100 characters in a shell escape command, 63 charac-
ters  in  a string valued option, and 30 characters in a tag
name, and a limit of 250000 lines in the  file  is  silently
enforced.

     The _v_i_s_u_a_l implementation limits the number  of  macros
defined  with  map to 32, and the total number of characters
in macros to be less than 512.


_A_c_k_n_o_w_l_e_d_g_m_e_n_t_s.  Chuck Haley  contributed  greatly  to  the
early  development  of  _e_x.   Bruce  Englar  encouraged  the
redesign which led to _e_x version 1.  Bill Joy wrote versions
1  and 2.0 through 2.7, and created the framework that users
see in the present editor.  Mark  Horton  added  macros  and
other features and made the editor work on a large number of
terminals and Unix systems.





                       July 21, 1991


